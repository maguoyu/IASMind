---
title: Python 代码规范
---

# Python 代码规范

## 代码风格

- 遵循 **PEP 8** 代码风格指南
- 使用 **4个空格** 作为缩进，不使用制表符
- 最大行长度为 **88个字符**（兼容Black格式化工具）
- 使用 **蛇形命名法** 命名变量和函数（`snake_case`）
- 使用 **帕斯卡命名法** 命名类（`PascalCase`）
- 使用 **大写蛇形命名法** 命名常量（`UPPER_SNAKE_CASE`）
- 模块导入顺序：标准库、第三方库、本地应用/库

## 文档和注释

- 使用 **文档字符串（docstrings）** 为所有函数、方法和类提供文档
- 文档字符串格式应该遵循 **Google风格**
- 代码应该是自解释的，仅在必要时添加注释
- 注释应使用中文，便于团队内部理解

示例文档字符串:
```python
def process_data(data: dict, options: Optional[Dict] = None) -> List[dict]:
    """处理输入数据并返回结果列表。

    Args:
        data: 要处理的输入数据
        options: 可选的处理配置参数

    Returns:
        处理后的数据列表

    Raises:
        ValueError: 如果输入数据格式不正确
    """
    ...
```

## 类型提示

- 使用 **类型注解** 增强代码可读性和可维护性
- 对于复杂类型，使用 `typing` 模块（如 `List`, `Dict`, `Optional` 等）
- 对于返回值为 `None` 的函数，显式标注返回类型为 `None`

## 错误处理

- 使用 **异常** 处理错误情况，而不是返回错误码
- 只捕获预期的异常，避免捕获所有异常（不使用裸露的 `except:`）
- 提供有意义的错误消息
- 在合适的情况下使用自定义异常类

## 异步编程

- 对于IO密集型操作，使用 `async/await` 语法
- 异步函数应以 `async_` 前缀命名，或在函数名中明确表明其异步性质
- 避免在异步函数中使用阻塞操作
- 使用 `asyncio` 进行并发操作

## 测试

- 为关键功能编写单元测试
- 使用断言验证预期结果
- 测试函数应命名为 `test_<被测功能>`
- 测试应该是独立的，不应依赖于其他测试的状态

## FastAPI 特定规范

- 路由函数应明确指定响应模型
- 使用 Pydantic 模型定义请求和响应数据结构
- 使用依赖注入系统进行共享逻辑
- 正确设置状态码和错误响应

## AI和LangChain相关规范

- 保持LLM提示模板的简洁和明确
- 对于复杂的AI工作流，使用LangGraph构建清晰的节点和边
- 缓存昂贵的LLM调用结果
- 添加适当的日志记录，特别是对LLM输入和输出
